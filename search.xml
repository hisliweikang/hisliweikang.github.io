<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kafka</title>
      <link href="2021/08/25/Kafka/"/>
      <url>2021/08/25/Kafka/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC小谈</title>
      <link href="2021/08/25/SpringMVC%E5%B0%8F%E8%B0%88/"/>
      <url>2021/08/25/SpringMVC%E5%B0%8F%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a><strong>SpringMVC</strong></h4><p>– 2021/7/27 15:20<br>[TOC]</p><h5 id="1-SpringMVC的简述"><a href="#1-SpringMVC的简述" class="headerlink" title="1. SpringMVC的简述"></a>1. SpringMVC的简述</h5><blockquote><p>基于spring的web应用框架，运用了单例设计模式（性能考虑），是线程安全的（故而不能在控制器中使用成员变量）</p></blockquote><hr><h5 id="2-springMVC的优缺点"><a href="#2-springMVC的优缺点" class="headerlink" title="2. springMVC的优缺点"></a>2. springMVC的优缺点</h5><blockquote><p>优点：</p></blockquote><ul><li>不仅仅局限于JSP技术，可以使用各种视图技术；</li><li>分层设计易于扩展，利于重用；</li><li>兼容Spring，可以使用IOC和AOP技术；</li><li>低耦合，高内聚；</li><li>便于分工，有着清晰的角色分配，多人协作下并行开发，提高工作效率；<blockquote><p>缺点：</p></blockquote></li><li>分层设计会增加工作量，影响开发效率，<code>不适合中小型应用的开发</code></li><li>的答复</li></ul><hr><h5 id="3-工作原理图-amp-调用流程简述"><a href="#3-工作原理图-amp-调用流程简述" class="headerlink" title="3. 工作原理图&amp;调用流程简述"></a>3. 工作原理图&amp;调用流程简述</h5><blockquote><p>工作原理图：<br><img src= "/img/loading.gif" data-lazy-src="en-resource://database/1168:1" alt="9a066541215e564690bd8e91f8b39eb6.png">@w=1000<br>调用流程简述：</p></blockquote><ul><li>DispatcherServlet处理请求和响应，映射器查找Handler，适配器调度Handler，ViewResolver解析渲染View，每个过程都需要由分发处理器请求和响应的过程；<blockquote><p>调用流程详述：如工作原理图</p></blockquote></li><li> 用户或客户端发送请求，DispatcherServlet进行分发处理（）；</li><li> 向HandlerMapper请求Handler（初始化并获取对象的过程）</li><li> 通过映射器HandlerMapping找到对应的handler，初始化后返回给DispatcherServlet，之后DispatcherServlet将handler传给适配器HandlerAdapter，适配器执行对应对象的方法，处理好业务逻辑之后返回modalAndView（执行Handler的逻辑行为）</li><li> 视图解析器ViewResolver对modalAndView根据视图名称进行解析返回View真正的视图对象，渲染视图之后响应客户端（视图解析以及渲染）</li></ul><hr><h5 id="4-核心组件"><a href="#4-核心组件" class="headerlink" title="4. 核心组件"></a>4. 核心组件</h5><ul><li><input disabled="" type="checkbox"> 表示无需程序员设计开发</li><li>[x] 表示需要程序员设计开发</li></ul><hr><ul><li><input disabled="" type="checkbox"> 1）前端控制器：DispatcherServlet<ul><li>作用：接收请求，响应结果，降低代码耦合度，相当于转发器</li></ul></li><li><input disabled="" type="checkbox"> 2）处理器映射器：HandlerMapping<ul><li>作用： 通过Url查找Handler</li></ul></li><li><input checked="" disabled="" type="checkbox"> 3）处理器：Handler<ul><li> 注意：在编写Handler的时候要按照HandlerAdapter要求的规则去编写，这样适配器, HandlerAdapter才可以正确的去执行Handler</li></ul></li><li><input disabled="" type="checkbox"> 4）处理器适配器：HandlerAdapter</li><li><input disabled="" type="checkbox"> 5）视图解析器：ViewResolver<ul><li> 作用：进行视图的解析，根据视图逻辑名解析成真正的视图（view）</li></ul></li><li><input checked="" disabled="" type="checkbox"> 6）视图渲染器：View</li></ul><h5 id="5-常用的注解"><a href="#5-常用的注解" class="headerlink" title="5. 常用的注解"></a>5. 常用的注解</h5><ul><li>@RestController（表示层）<ul><li>@Controller：只是表示这个类是控制器，无真正作用，需要配合@RequestMapping使用</li><li>@ResponseBody：调用HttpMessageConverter将返回值转换为指定格式，传递非页面而是某种格式的数据（json、xml）</li></ul></li><li>@RequestMapping：标记这个控制器的上下文，让请求可以进入对应的控制器（简言之就是将URL映射到一个或一个特定方法上）</li><li>@Servlet：定义Servlet（服务层）</li><li>@PathVariable：对于静态url中带有id等如入参值的GET请求，如 @RequestMapping(value =<br>“/page/{id}”, method = RequestMethod.GET)，使用page(@PathVariable(“id”) id…)获取上下文action值</li><li>@RequestParam：对于静态url，获取request中的请求参数，并由入参解析器封装到指定入参中</li></ul><h5 id="6-与Struct2的区别"><a href="#6-与Struct2的区别" class="headerlink" title="6. 与Struct2的区别"></a>6. 与Struct2的区别</h5><blockquote><p>相同点：都是基于MVC设计的web应用框架</p></blockquote><blockquote><p>不同点：</p></blockquote><ul><li>struct2和SpringMVC使用的转发器不同，前者使用filter，后者用的是DispatcherSerlvet；</li><li>struct2和SpringMVC请求入参接收方式不同（也可以说线程安全角度不一样），前者需要定义类的成员变量进行映射（基于类的开发，线程不安全），后者则是采用方法入参接收方式（基于方法的开发，线程安全）；</li><li>struct2和SpringMVC存取请求和响应的数据的方法不同，前者采用值栈，通过OGNL存取数据，而SpringMVC由入参解析器将request进行内容解析后，把请求参数组装到方法入参中，同时处理器会将模型数据和视图保存到ModalAndView对象中，最后由视图解析器解析并渲染给前端；</li><li>struct2需要自己通过创建bean或初始化对象，SpringMVC由Spring容器管理并控制对象</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx小谈</title>
      <link href="2021/06/20/Nginx%E5%B0%8F%E8%B0%88/"/>
      <url>2021/06/20/Nginx%E5%B0%8F%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="753a2d4a214a7182df29f583b809e71e1850d4613aa74072f19ea597c069fe1d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">欢迎来到我的博客, 该博文需要密码查看.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象小谈</title>
      <link href="2021/05/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%8F%E8%B0%88/"/>
      <url>2021/05/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%8F%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h2><h3 id="对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。"><a href="#对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。" class="headerlink" title="对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。"></a>对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。</h3><hr><p><strong>封装</strong><br>明确标识出允许外部使用的所有函数以及数据项，外部无需修改或关注内部的实现；内部实现对外部透明：<br>1）javabean属性私有，提供get、set外部调用，因为私有属性或内部逻辑是由javabean决定的。<br>2）类似mybatis，hebbrilate这些持久层框架，操作数据库，我们一般直接拿来用就可以了（无需关心连接怎么建立，sql怎么执行）</p><hr><p><strong>继承</strong><br>继承父类的方法，子类去改变或扩展，子类的共有属性或方法直接使用父类的，无需自己再定义，只写自己的个性化</p><hr><p><strong>多态</strong><br>基于对象所属类的不同，外部对同一个方法的调用，实现逻辑不同，其中它和继承是一脉相承的，实现需要满足以下3点<br>1）继承  2）方法的重写  3）父类引用指向子类对象【可是无法调用子类特有功能】</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring小谈</title>
      <link href="2020/03/01/Spring%E5%B0%8F%E8%B0%88/"/>
      <url>2020/03/01/Spring%E5%B0%8F%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a><strong>Spring</strong></h4><h5 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h5><p>spring是Java企业级应用的轻量级开源开发框架，针对快速并简化构建J2EE平台的web应用，通过POJO作为基础的编程模型以养成良好编码习惯。</p><hr><h5 id="2、作用和好处"><a href="#2、作用和好处" class="headerlink" title="2、作用和好处"></a>2、作用和好处</h5><ul><li>轻量</li><li>控制反转</li><li>面向切面的编程（AOP）</li><li>容器</li><li>事务管理</li><li>异常处理</li></ul><hr><h5 id="3、基本组成部分"><a href="#3、基本组成部分" class="headerlink" title="3、基本组成部分"></a>3、基本组成部分</h5><ul><li>Core Module: 核心容器（应用上下文）模块, 用到了Bean和Context模块， 提供spring框架的基础功能，Spring 框架建立在此模块之上， 它使 Spring 成为一个容器。<ul><li>BeanFactory：利用工厂模式实现，同时提供反转控制，将配置和依赖从应用代码中分离开来，xmlBeanFactory是其中最常用的工厂类。<ul><li>xmlBeanFactory：读取xml配置元数据，根据其定义动态加载beans，从而创建一个完全配置的应用和系统。</li></ul></li></ul></li><li>Bean~</li><li>Context~</li><li>Expression~</li><li>JDBC ~：JDBC抽象和Dao模块使得数据库代码简洁，避免了由于数据关闭而导致的问题，在此之上还提供了统一的错误处理机制，利用Spring Aop为对象提供事务管理。</li><li>ORM ~：对象/关系映射工具，目前主流的ORM框架是IBATIS SQL Maps和JDO。</li><li>OXM ~：</li><li>Java Message Service（JMS）~</li><li>Transaction~</li><li>Web ~：提供web应用上下文，支持多种面向web的任务，如透明处理多个上传文件和请求参数绑定到业务对象中</li><li>Web-Servlet~</li><li>Web-Struts~</li><li>Web-Portlet~</li></ul><hr><h5 id="4、-Spring-IOC-容器"><a href="#4、-Spring-IOC-容器" class="headerlink" title="4、 Spring IOC 容器"></a>4、 Spring IOC 容器</h5><ul><li><p>作用：负责对对象进行创建，管理（依赖注入DI），装配，配置和管理对象生命周期</p></li><li><p>优点： </p><ul><li>轻量级，减少代码量</li><li>便于测试（单元测试不需要单例＆JNDII查找机制）</li><li>实现松散耦合</li><li>支持饿汉式初始化和懒汉式加载</li></ul></li><li><p>实现方式：</p><ul><li><p>filed注入方式：最常用的方式，直接使用@Autowird即可完成，缺点在于如果出现A依赖注入B，B也依赖注入A，不会在程序启动之前报错BeanCurrentlyInCreationException</p></li><li><p>构造器注入方式（强制依赖）：官方最推荐的最好的方案，优点就是可以在启动之前抛出循环依赖的报错，缺点代码量比较多，也不美观</p><ul><li><p>实现方式：</p><pre><code>  @Controller  public class UserController &#123;    private final FooService fooService;    @Autowired    public FooController(FooService fooService) &#123;        this.fooService = fooService;    &#125;    //使用方式上同，略  &#125;</code></pre></li></ul></li><li><p>setter注入方式（可选依赖）：容器调用无参构造器或无参 static 工厂方法实例化 bean 之后，调用该bean的setter方法，写法更加冗余，不美观，也不推荐</p></li></ul></li></ul><hr><h5 id="5、Spring-Beans"><a href="#5、Spring-Beans" class="headerlink" title="5、Spring Beans"></a>5、Spring Beans</h5><ul><li>概念：beans是通过容器中配置的元数据创建出来，它可以以XML文件中<bean>…<bean/>对的形式定义。</li><li>定义方式（Spring怎么提供配置元数据）<ul><li>XML配置文件</li><li>基于java的配置</li><li>基于注解的配置</li></ul></li><li>支持的bean的作用域<ul><li>singleton: 单例，spring容器中只有一个实例，缺省scope时默认为singleton</li><li>prototype：允许多个实例存在</li><li>在基于 web 的 Spring ApplicationContext的作用域：<ul><li>request：每次http请求都会创建一个bean</li><li>session：在一个HttpSession中，一个bean定义对应一个实例</li><li>global-session： 在全局的HttpSession中，一个bean定义对应一个实例</li></ul></li></ul></li><li>bean装配：<ul><li>概念：Spring容器根据已有的依赖关系，通过依赖注入的方式将bean组装到一起的过程</li><li>自动装配：Spring容器通过BeanFactory处理各个组装bean之间的协作，无需<constructor-arg>和<property>配置<ul><li>装配方式（5种）：<bean name="xxx" autowire="XXX"></bean><pre><code> 1）no：默认不自动组装，需要通过显示调用 2）byName：通过参数名自动装配，容器试图匹配、装配和该bean的属性具有相同名字的bean。实现原理将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。 3）通过参数类型自动装配，前提是同一类型的对象，在spring容器中唯一。如果不唯一，会报NoUniqueBeanDefinitionException不唯一的异常。 4）constructor：这个方式类似于 byType， 但是要提供给构造器参数，如果没有确定</code></pre>的带参数的构造器参数类型，将会抛出异常。<pre><code> 5）autodetect：首先尝试使用 constructor 来自动装配，如果无法工作，则使用byType方式。</code></pre></li></ul></li></ul></li><li>注意：可以让Spring容器注入一个null和空字符串，不会报错报异常。</li></ul><hr><h5 id="6、Spring-注解"><a href="#6、Spring-注解" class="headerlink" title="6、Spring 注解"></a>6、Spring 注解</h5><ul><li>基于注解的容器配置：只需在类（接口），方法，属性等前面加入注解即可完成注入，无需使用xml表述bean装配关系的方式<ul><li>开启方式：Spring中注解装配默认是不开启的，需要手动在Spring 配置文件中加入配置&lt;<a href="context:annotation-config">context:annotation-config</a>&gt;元素</li></ul></li><li>常见的注解及其含义：<ul><li>@Configuration：相当于定义一个bean</li><li>@Bean：返回一个对象，将这个对象注入到Spring应用上下文</li><li>@Component：</li><li>@Required：被注解的bean属性如果未被设置值，则报错BeanInitializationException</li><li>@Autowird：修改setter方法、构造器、属性或者具有任意名称和多个参数的PN方法，起到自动装载的作用</li><li>@Qualifier：定义了多个相同类型的bean，spring容器不知道使用哪个的时候，可以用该注解+@Autowired结合取消混淆，指定使用所需装配的bean</li></ul></li></ul><hr><h5 id="7、Spring-数据访问"><a href="#7、Spring-数据访问" class="headerlink" title="7、Spring 数据访问"></a>7、Spring 数据访问</h5><ul><li>SpringJDBC框架：更有效使用JDBC进行资源管理和错误处理。可以使用SpringJDBC提供的模板类JdbcTemplate来访问数据源。<ul><li>JdbcTemplate：<ul><li>将数据库数据转变为基本数据类型和对象</li><li>执行已有的或可调用的数据库操作语句(sql语句)</li><li>自定义数据错误处理</li></ul></li></ul></li><li>Spring事务的实现方式和原理：<ul><li>实现方式：本质是通过数据库对事务的支持</li><li>实现原理：数据库层的提交和回滚是通过binlog和redolog实现的</li></ul></li><li>Spring事务管理类型：<ul><li>编程式事务管理：允许通过代码控制事务管理，灵活性较强</li><li>声明式事务管理：将业务代码和事务管理分离开来，只需使用注解和XML配置</li></ul></li></ul><hr><h5 id="8、Spring-面向切面编程（AOP）"><a href="#8、Spring-面向切面编程（AOP）" class="headerlink" title="8、Spring 面向切面编程（AOP）"></a>8、Spring 面向切面编程（AOP）</h5><ul><li>概念：OOP允许开发者定义纵向关系，可并不适用定义横向关系，所以AOP可以说是作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect）。</li><li>优点和作用：<ul><li>优点：<ul><li>减少系统中的重复代码</li><li>降低模块间的耦合度</li><li>提高系统的可维护性</li></ul></li><li>作用：用于权限认证、日志、事务处理等</li></ul></li><li>AOP常见的名词解析：</li><li>关注点：<ul><li>横切关注点：比较特殊的关注点，通常指的是贯彻系统或应用的都需要用到的功能，如：日志、安全和数据传输。</li></ul></li><li>连接点：在我们应用程序插入一个AOP切面的位置</li><li>通知：程序执行时AOP框架触发的代码段<ul><li>触发类型：<ol><li>before：前置通知</li><li>after：无论方法是否成功执行，都会调用的后置通知</li><li>after-returning：执行成功时执行的通知</li><li>after-throwing：抛异常时执行的通知</li><li>around: before和after都会执行     </li></ol></li></ul></li><li>切点：切入点是一个或一组连接点，通知将在这些位置执行，可以通过表达式或匹配的方式<br>指明切入点。</li><li>目标对象：一个或多个被通知的对象</li><li>代理：通知目标对象后创建的对象。对于客户端来说，代理对象和目标对象等价。</li><li>织入：将切面应用到目标对象并创建的新的代理对象的过程。</li><li>基于XML Schema方式的切面：由常规类以及基于XML的配置实现。</li><li>基于注解的切面：基于@AspectJ的实现，声明切面的风格和java5标注的pojo类的风格一致。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot小谈</title>
      <link href="2019/12/07/SpringBoot/"/>
      <url>2019/12/07/SpringBoot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h2><h3 id="对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。"><a href="#对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。" class="headerlink" title="对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。"></a>对比面向过程，它们是两种不同的处理问题的角度。面向过程注重事情的步骤以及顺序，直接高效；面向对象注重事情有哪些参与者（对象），各自需要做什么，便于复用，扩展，维护。</h3><hr><p><strong>封装</strong><br>明确标识出允许外部使用的所有函数以及数据项，外部无需修改或关注内部的实现；内部实现对外部透明：<br>1）javabean属性私有，提供get、set外部调用，因为私有属性或内部逻辑是由javabean决定的。<br>2）类似mybatis，hebbrilate这些持久层框架，操作数据库，我们一般直接拿来用就可以了（无需关心连接怎么建立，sql怎么执行）</p><hr><p><strong>继承</strong><br>继承父类的方法，子类去改变或扩展，子类的共有属性或方法直接使用父类的，无需自己再定义，只写自己的个性化</p><hr><p><strong>多态</strong><br>基于对象所属类的不同，外部对同一个方法的调用，实现逻辑不同，其中它和继承是一脉相承的，实现需要满足以下3点<br>1）继承  2）方法的重写  3）父类引用指向子类对象【可是无法调用子类特有功能】</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好看的封面图片</title>
      <link href="2019/08/20/%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87/"/>
      <url>2019/08/20/%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="好看的封面图片"><a href="#好看的封面图片" class="headerlink" title="好看的封面图片"></a>好看的封面图片</h4><ul><li><a href="https://pic.netbian.com/uploads/allimg/210810/231712-1628608632f5e9.jpg">https://pic.netbian.com/uploads/allimg/210810/231712-1628608632f5e9.jpg</a></li><li><a href="https://pic.netbian.com/uploads/allimg/180826/113958-153525479855be.jpg">https://pic.netbian.com/uploads/allimg/180826/113958-153525479855be.jpg</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《幸福的婚姻》</title>
      <link href="2019/08/03/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E5%A9%9A%E5%A7%BB%E3%80%8B/"/>
      <url>2019/08/03/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E5%A9%9A%E5%A7%BB%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="《幸福的婚姻》"><a href="#《幸福的婚姻》" class="headerlink" title="《幸福的婚姻》"></a>《幸福的婚姻》</h4><h5 id="1-对爱人了如指掌"><a href="#1-对爱人了如指掌" class="headerlink" title="1.对爱人了如指掌"></a>1.对爱人了如指掌</h5><ul><li>尽可能了解伴侣<ul><li>喜好</li><li>恋爱、结婚）纪恋日</li><li>家人情况</li><li>生活重心和工作状态</li></ul></li><li>根据上面的了解绘制爱情地图</li></ul><h5 id="2-互相喜欢和欣赏对方"><a href="#2-互相喜欢和欣赏对方" class="headerlink" title="2.互相喜欢和欣赏对方"></a>2.互相喜欢和欣赏对方</h5><ul><li>“我欣赏”：列出自己最喜欢恋人的三点，并列举出具体实例或习惯，最后彼此交换答案</li><li>回忆一路走来的点点滴滴，比如第一次约会怎样怎样，是什么让彼此决定在一起的等等</li></ul><h5 id="3-给爱人足够关注和支持"><a href="#3-给爱人足够关注和支持" class="headerlink" title="3.给爱人足够关注和支持"></a>3.给爱人足够关注和支持</h5><ul><li>沟通交流不要敷衍了事，要多体现自己的关心和体贴，比如自己很忙，恋人刚好找你，你可以让ta简单描述一下，等晚上大家有空一起讨论</li><li>对于恋人对自己的关心，加油鼓劲等等，要心怀感激</li><li>减压谈话，无条件支持伴侣，不要提供建议，只做一个倾听者</li></ul><h5 id="4-给爱人足够尊重和平等"><a href="#4-给爱人足够尊重和平等" class="headerlink" title="4.给爱人足够尊重和平等"></a>4.给爱人足够尊重和平等</h5><ul><li>多分享权力，平等对待恋人</li><li>不时给伴侣给出告诫和意见，也要乐于倾听和接纳</li><li>彼此适当让步</li></ul><h5 id="5、在冲突面前及时刹车"><a href="#5、在冲突面前及时刹车" class="headerlink" title="5、在冲突面前及时刹车"></a>5、在冲突面前及时刹车</h5><ul><li>临时性冲突：最忌讳的就是对待陌生人犯错宽容，对自己人却是一顿批评<ul><li>这时候应该要及时冷静下来，把“你”字憋回去，换成“我认为…”</li></ul></li><li>抛出停战的橄榄枝，“抱歉，我太冲动了或我说话太冲了”</li></ul><h5 id="6、意识到伴侣内心的愿望"><a href="#6、意识到伴侣内心的愿望" class="headerlink" title="6、意识到伴侣内心的愿望"></a>6、意识到伴侣内心的愿望</h5><ul><li>分享自己内心想法，了解彼此底线和原则</li><li>生活中的一些小习惯多半和人的成长经历，动机和愿望有关，理解并学会让步</li></ul><h5 id="7、创造家庭文化，找寻共同意义"><a href="#7、创造家庭文化，找寻共同意义" class="headerlink" title="7、创造家庭文化，找寻共同意义"></a>7、创造家庭文化，找寻共同意义</h5><ul><li>了解恋人特有的习俗（在特定日子有固定的节目和行为）</li><li>深入交流人生态度，谈谈人生理想，共同目标，聊聊家庭观念</li><li>打造独有的家庭仪式 培养生活仪式感<ul><li>DIY手工</li><li>下班一起打卡健身</li><li>每周来一次按摩</li><li>一起选家居幸福小物件</li></ul></li><li>聊聊婚姻观<ul><li>男主外女主内还是双方都各自有自己事业</li><li>生宝宝，</li><li>车房</li></ul></li><li>保留特有的象征物（纪恋日送的小礼物）</li></ul><h5 id="8、团结一致，打造良好的婆媳关系"><a href="#8、团结一致，打造良好的婆媳关系" class="headerlink" title="8、团结一致，打造良好的婆媳关系"></a>8、团结一致，打造良好的婆媳关系</h5><ul><li>家庭矛盾发生时，夫妻要保留一致战线</li><li>生宝宝计划，要学会适应父母的身份</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《薛兆丰的经济学讲义》</title>
      <link href="2019/07/31/%E3%80%8A%E8%96%9B%E5%85%86%E4%B8%B0%E7%9A%84%E7%BB%8F%E6%B5%8E%E5%AD%A6%E8%AE%B2%E4%B9%89%E3%80%8B/"/>
      <url>2019/07/31/%E3%80%8A%E8%96%9B%E5%85%86%E4%B8%B0%E7%9A%84%E7%BB%8F%E6%B5%8E%E5%AD%A6%E8%AE%B2%E4%B9%89%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="《薛兆丰的经济学讲义》"><a href="#《薛兆丰的经济学讲义》" class="headerlink" title="《薛兆丰的经济学讲义》"></a>《薛兆丰的经济学讲义》</h4><h5 id="1、经济学家眼中的真实世界"><a href="#1、经济学家眼中的真实世界" class="headerlink" title="1、经济学家眼中的真实世界"></a>1、经济学家眼中的真实世界</h5><ul><li>法律背后不是句号，而是冒号，这新的法律政策派生出来的是人们对新的法律法规的应对策略</li><li>马粪争夺案验证了公平的背后是对效率的考证</li><li>亚当斯密在《国富论》里面阐述了经济人的行为，讲求效率和利益最大化；在《道德情操论》里阐述了道德人的行为，讲求爱心和同理心；两者是相辅相成的，即经济人的利己的行为受道德人的约束；</li><li>小圈子（家庭，亲友）讲爱心靠同情，大世界（陌生人）靠市场规则。</li><li>铅笔的道理，世界上没有任何一个人掌握铅笔技术，却将世界各地的人们紧密协作起来，说明了市场的重要性和存在价值</li><li>美好愿望和爱心都不能凌驾于市场之上，资本是驱利的，慈善是扶弱的，可以这么说商业才是最具效率的慈善</li><li>歧视和区别对待<ul><li>区别在于价值导向不同，歧视是瞧不起不如自己的人，是自负的表现，而区别对待则是对不同的人和事看法和待遇不同，没有自负倾向，如社会常谈的放弃“学历歧视”和“唯才是举”是不一样的。</li><li>稀缺必然导致歧视，最有力的例子就是美国发生的次贷危机<br>总结：一个人是否学过经济学，最大的区别在于能否看到事物背后的本质，理解并采取行动，人生下来不是就心胸宽广的，是在工作经历中慢慢学乖的</li></ul></li></ul><hr><ul><li>利息是对于推迟消费的补偿，利息和价格一样，有了人为的管制，只会带来负面的结果。</li><li>对于未来的耐心决定了当下的选择</li><li>投资是时间纬度上的平衡消费</li><li>股市不可预测，因为股市反应的是人类对于资产未来价值的预期，但是人得不到未来的信息。</li><li>有效市场假说，资产价格反应资产信息</li><li>保险和储蓄都是对于未来不确定性的应对方式，储蓄是风险偏好型，保险是提供未来收益一致性的服务</li><li>把明明是商品的东西特殊化，只是自欺欺人。</li></ul><hr><h5 id="2、你的眼里不该只有钱"><a href="#2、你的眼里不该只有钱" class="headerlink" title="2、你的眼里不该只有钱"></a>2、你的眼里不该只有钱</h5><ul><li></li><li>机会成本：</li><li>沉没成本：不是成本</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
